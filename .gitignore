.env
/home/prajwalak/Desktop/code_anna_test_repos/youTalk
/home/prajwalak/Desktop/code_anna_test_repos/TravelCrafter
__pycache__
/home/prajwalak/Documents/privado-cli
/home/prajwalak/Desktop/CodeAnaa/test_repo



# REFERENCE FRONTEND CODE
import { useState } from 'react';

interface AnalysisResult {
  json_data: any;
  csv_data: string;
  status: string;
}

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [viewMode, setViewMode] = useState<'json' | 'csv'>('json');
  const [repoUrl, setRepoUrl] = useState('');
  const [jobId, setJobId] = useState<string | null>(null);

  const handleAnalyzeRepo = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!repoUrl.trim()) return;

    setLoading(true);
    setError(null);
    setAnalysisResult(null);
    setJobId(null);

    try {
      // Start the analysis
      const response = await fetch('http://localhost:8000/analyze', {
        method: 'POST',
        mode: 'cors',
        credentials: 'omit',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({ url: repoUrl })
      });

      if (!response.ok) {
        const errorData = await response.json();
        setError(errorData.detail || 'An error occurred while starting the analysis');
        setLoading(false);
        return;
      }

      const data = await response.json();
      setJobId(data.job_id);
      // Begin polling using the job ID
      pollResult(data.job_id);
    } catch (error) {
      setError('Network error or server is not responding');
      setLoading(false);
    }
  };

  const pollResult = (jobId: string) => {
    const interval = setInterval(async () => {
      try {
        const response = await fetch(`http://localhost:8000/result/${jobId}`, {
          method: 'GET',
          mode: 'cors',
          credentials: 'omit',
          headers: {
            'Accept': 'application/json',
          }
        });
        // Since the backend always returns 200 with JSON, we do not get CORS errors from 404 responses.
        const result = await response.json();
        if (result.status !== 'processing') {
          setAnalysisResult(result);
          setLoading(false);
          clearInterval(interval);
        }
      } catch (error) {
        setError('Error while polling for result.');
        setLoading(false);
        clearInterval(interval);
      }
    }, 5000); // poll every 5 seconds
  };

  return (
    <div style={{ padding: '2rem' }}>
      <h1>GitHub Repository Analyzer</h1>
      <form onSubmit={handleAnalyzeRepo}>
        <input
          type="text"
          value={repoUrl}
          onChange={(e) => setRepoUrl(e.target.value)}
          placeholder="Enter GitHub repository URL"
          style={{ width: '300px', marginRight: '1rem' }}
        />
        <button type="submit">Analyze Repo</button>
      </form>

      {loading && <p>Processing...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {analysisResult && (
        <div style={{ marginTop: '2rem' }}>
          <div>
            <button onClick={() => setViewMode('json')}>JSON View</button>
            <button onClick={() => setViewMode('csv')}>CSV View</button>
          </div>
          <div style={{ marginTop: '1rem' }}>
            {viewMode === 'json' ? (
              <pre>{JSON.stringify(analysisResult.json_data, null, 2)}</pre>
            ) : (
              <pre>{analysisResult.csv_data}</pre>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
